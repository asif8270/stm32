/*
 * spi.c
 *
 *  Created on: Oct 5, 2024
 *      Author: Asif
 */

#include "stm32f4xx.h"
#include "spi.h"
/*PA5 -> CLK
 *PA6 -> MISO
 *PA7 -> MOSI
 *PE3 -> SS/CS*/

#define GPIOAEN		(1U<<0)
#define GPIOEEN		(1U<<4)
#define SPI1EN		(1U<<12)

#define SR_TXE		(1U<<1)
#define SR_RXNE		(1U<<0)
#define SR_BSY		(1U<<7)

void SPI_gpioInit(void)
{
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;

	/*Enable clock access to GPIOE*/
	RCC->AHB1ENR |= GPIOEEN;

	/*Set PA5, PA6, and PA7 to alternate function*/
	/*PA5*/
	GPIOA->MODER &= ~(1U<<10);
	GPIOA->MODER |= (1U<<11);

	/*PA5*/
	GPIOA->MODER &= ~(1U<<12);
	GPIOA->MODER |= (1U<<13);

	/*PA7*/
	GPIOA->MODER &= ~(1U<<14);
	GPIOA->MODER |= (1U<<15);

	/*Set alternate function - AF5*/
	GPIOA->AFR[0] |= (5U<<20);
	GPIOA->AFR[0] |= (5U<<24);
	GPIOA->AFR[0] |= (5U<<28);

	/*Set PA5, PA6, and PA7 output speed to normal*/
	GPIOA->OSPEEDR |= (1U<<10);
	GPIOA->OSPEEDR &= ~(1U<<11);
	GPIOA->OSPEEDR |= (1U<<12);
	GPIOA->OSPEEDR &= ~(1U<<13);
	GPIOA->OSPEEDR |= (1U<<14);
	GPIOA->OSPEEDR &= ~(1U<<15);

	/*Set PA5, PA6, and PA7 to pull-dwon mode*/
	GPIOA->PUPDR |= (1U<<10);
	GPIOA->PUPDR &= ~(1U<<11);
	GPIOA->PUPDR |= (1U<<12);
	GPIOA->PUPDR &= ~(1U<<13);
	GPIOA->PUPDR |= (1U<<14);
	GPIOA->PUPDR &= ~(1U<<15);

	/*Set PE3 as output*/
	GPIOE->MODER |= (1U<<6);
	GPIOE->MODER &= ~(1U<<7);


}

void SPI1_Config(void)
{
	/*Enable clock access to SPI1*/
	RCC->APB2ENR |= SPI1EN;

	/*Set Baud Rate*/
	SPI1->CR1 |= (1U<<3 | 1U<<5);

	/*Set CPOL and CPHA to 1*/
	SPI1->CR1 &= ~(1U<<0);
	SPI1->CR1 &= ~(1U<<1);

	/*Set SPI1 to Bi-directional mode*/
	SPI1->CR1 &= ~(1U<<15);

	/*Set SPI1 to Full Duplex mode*/
	SPI1->CR1 &= ~(1U<<10);

	/*Set MSB first*/
	SPI1->CR1 &= ~(1U<<7);

	/*Set SPI1 to master mode*/
	SPI1->CR1 |= (1U<<2);

	/*Set data frame format to 8-bit mode*/
	SPI1->CR1 &= ~(1U<<11);

	/*Set SSI and SSM to 1*/
	SPI1->CR1 |= (1U<<8 | 1U<<9);

	/*Enable SPI1 module*/
	SPI1->CR1 |= (1U<<6);

	/*Set SPI1 format to Motorola*/
	SPI1->CR2 &= ~(1U<<4);
}

void SPI1_Transmit(uint8_t *data, uint8_t size)
{
	uint8_t temp;

	/*Wait until TXE is set*/
	while(!(SPI1->SR & SR_TXE)){}

	/*Write data to the data register*/
	SPI1->DR = data;

	/*Wait until TXE is set*/
	while(!(SPI1->SR & SR_TXE)){}

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & SR_BSY)){}

	/*Clear the OVR by reading the DR and SR register*/
	temp = SPI1->DR;
	temp = SPI1->SR;
}

void SPI1_Receive(uint8_t *data, uint8_t size)
{
	while(size)
	{
		/*Send dummy data*/
		SPI1->DR = 0;

		/*Wait for RXNE to be set*/
		while(!(SPI1->SR & SR_RXNE)){}

		/*Read the data from DR*/
		data = (SPI1->DR);
		size--;
	}
}

void csLow(void)
{
	/*Set the PE3/CS low*/
	GPIOE->ODR &= ~(1U<<3);
}

void csHigh(void)
{
	/*Set the PE3/CS high*/
	GPIOE->ODR |= (1U<<3);
}

