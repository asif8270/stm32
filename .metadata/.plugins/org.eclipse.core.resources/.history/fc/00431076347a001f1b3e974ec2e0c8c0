#include "stm32f4xx.h"

#define GPIOA_EN			(1U<<0)

#define SYS_FREQ			16000000
#define APB1_CLK			SYS_FREQ
#define UART_BAUDRATE		115200

#define UART2_EN			(1U<<17)
#define UART_TE				(1U<<3)
#define UART_UE				(1U<<13)

void uart2_tx_init(void);
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main(void)
{



	while(1)
	{
	}
}

void uart2_tx_init(void)
{
	/********** Configuring the GPIOA **********/

	/*Enable clock access to the GPIOA*/
	RCC->AHB1ENR |= GPIOA_EN;

	/*Set the PA2 mode as Alternate Function*/
	GPIOA->MODER &= ~(1U<<4);
	GPIOA->MODER |= (1U<<5);

	/*Set PA2 the Alternate Function type to UART_TX (AF07) */
	GPIOA->AFR   |= (1U<<8);
	GPIOA->AFR   |= (1U<<9);
	GPIOA->AFR   |= (1U<<10);
	GPIOA->AFR   &= ~(1U<<11);

	/********** Configuring the UART **********/

	/*Enable clock access to the UART module*/
	RCC->APB1ENR |= UART2_EN;

	/*Configure the UART module baud rate*/
	USART2->BRR = uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);

	/*Configure the UART module direction*/
	USART2->CR1  = UART_TE;

	/*Enable the UART module*/
	USART2->CR1 |= UART_UE;

}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
}

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
}





