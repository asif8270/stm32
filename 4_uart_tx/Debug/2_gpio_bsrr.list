
2_gpio_bsrr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00001348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00001340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000344  08000344  00001344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001348  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000032a  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000119  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000050  00000000  00000000  000017c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000033  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181bd  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000609  00000000  00000000  00019a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000883c6  00000000  00000000  0001a009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a23cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000080  00000000  00000000  000a2414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003e  00000000  00000000  000a2494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000328 	.word	0x08000328

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000328 	.word	0x08000328

080001c8 <main>:
#define LED_RED				PIN14

void wait(int count);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOD_EN;
 80001cc:	4b21      	ldr	r3, [pc, #132]	@ (8000254 <main+0x8c>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a20      	ldr	r2, [pc, #128]	@ (8000254 <main+0x8c>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOD->MODER |= (1U<<24);
 80001d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <main+0x90>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a1e      	ldr	r2, [pc, #120]	@ (8000258 <main+0x90>)
 80001de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001e2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<25);
 80001e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000258 <main+0x90>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000258 <main+0x90>)
 80001ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80001ee:	6013      	str	r3, [r2, #0]

	GPIOD->MODER |= (1U<<28);
 80001f0:	4b19      	ldr	r3, [pc, #100]	@ (8000258 <main+0x90>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a18      	ldr	r2, [pc, #96]	@ (8000258 <main+0x90>)
 80001f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80001fa:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<29);
 80001fc:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <main+0x90>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a15      	ldr	r2, [pc, #84]	@ (8000258 <main+0x90>)
 8000202:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000206:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOD->BSRR |= LED_GREEN;
 8000208:	4b13      	ldr	r3, [pc, #76]	@ (8000258 <main+0x90>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <main+0x90>)
 800020e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000212:	6193      	str	r3, [r2, #24]
		wait(100000);
 8000214:	4811      	ldr	r0, [pc, #68]	@ (800025c <main+0x94>)
 8000216:	f000 f823 	bl	8000260 <wait>

		GPIOD->BSRR |= GPIO_BSRR_BR12;
 800021a:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <main+0x90>)
 800021c:	699b      	ldr	r3, [r3, #24]
 800021e:	4a0e      	ldr	r2, [pc, #56]	@ (8000258 <main+0x90>)
 8000220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000224:	6193      	str	r3, [r2, #24]
		wait(100000);
 8000226:	480d      	ldr	r0, [pc, #52]	@ (800025c <main+0x94>)
 8000228:	f000 f81a 	bl	8000260 <wait>

		GPIOD->BSRR |= LED_RED;
 800022c:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <main+0x90>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a09      	ldr	r2, [pc, #36]	@ (8000258 <main+0x90>)
 8000232:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000236:	6193      	str	r3, [r2, #24]
		wait(100000);
 8000238:	4808      	ldr	r0, [pc, #32]	@ (800025c <main+0x94>)
 800023a:	f000 f811 	bl	8000260 <wait>

		GPIOD->BSRR |= GPIO_BSRR_BR14;
 800023e:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <main+0x90>)
 8000240:	699b      	ldr	r3, [r3, #24]
 8000242:	4a05      	ldr	r2, [pc, #20]	@ (8000258 <main+0x90>)
 8000244:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000248:	6193      	str	r3, [r2, #24]
		wait(100000);
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <main+0x94>)
 800024c:	f000 f808 	bl	8000260 <wait>
		GPIOD->BSRR |= LED_GREEN;
 8000250:	bf00      	nop
 8000252:	e7d9      	b.n	8000208 <main+0x40>
 8000254:	40023800 	.word	0x40023800
 8000258:	40020c00 	.word	0x40020c00
 800025c:	000186a0 	.word	0x000186a0

08000260 <wait>:
	}
}

void wait(int count)
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	volatile int i;
	for (i = 0; i < count; ++i) {}
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	e002      	b.n	8000274 <wait+0x14>
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	3301      	adds	r3, #1
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	687a      	ldr	r2, [r7, #4]
 8000278:	429a      	cmp	r2, r3
 800027a:	dcf8      	bgt.n	800026e <wait+0xe>
}
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff83 	bl	80001c8 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	@ (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
