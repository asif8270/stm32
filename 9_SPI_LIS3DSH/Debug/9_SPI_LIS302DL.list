
9_SPI_LIS302DL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000510  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000698  080006a0  000016a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000698  08000698  000016a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000698  08000698  000016a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000698  080006a0  000016a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000698  08000698  00001698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800069c  0800069c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000016a0  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000750  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002f8  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00002118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007f  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000192d4  00000000  00000000  00002257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001699  00000000  00000000  0001b52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0eb  00000000  00000000  0001cbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8caf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  000a8cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  000a8ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000680 	.word	0x08000680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000680 	.word	0x08000680

080001c8 <lis3dshRead>:
 */

#include <lis3dsh.h>

void lis3dshRead(uint8_t regAddress, uint8_t *rxdata, uint8_t size)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	6039      	str	r1, [r7, #0]
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
    /*Combine address and read bit*/
    regAddress |= LIS3DSH_Read_Flag;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	71fb      	strb	r3, [r7, #7]

    csLow();
 80001e2:	f000 f9df 	bl	80005a4 <csLow>

    /*Send address to read from*/
    SPI1_Transmit(&regAddress, 1);
 80001e6:	1dfb      	adds	r3, r7, #7
 80001e8:	2101      	movs	r1, #1
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f97c 	bl	80004e8 <SPI1_Transmit>

    /*Read data*/
    SPI1_Receive(rxdata, size);
 80001f0:	79bb      	ldrb	r3, [r7, #6]
 80001f2:	4619      	mov	r1, r3
 80001f4:	6838      	ldr	r0, [r7, #0]
 80001f6:	f000 f9af 	bl	8000558 <SPI1_Receive>

    csHigh();
 80001fa:	f000 f9e3 	bl	80005c4 <csHigh>
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}

08000206 <lis3dshWrite>:

void lis3dshWrite(uint8_t regAddress, uint8_t value)
{
 8000206:	b580      	push	{r7, lr}
 8000208:	b084      	sub	sp, #16
 800020a:	af00      	add	r7, sp, #0
 800020c:	4603      	mov	r3, r0
 800020e:	460a      	mov	r2, r1
 8000210:	71fb      	strb	r3, [r7, #7]
 8000212:	4613      	mov	r3, r2
 8000214:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];

	/*Enable multi-byte, place address into buffer*/
	data[0] = regAddress;
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	733b      	strb	r3, [r7, #12]

	/*Place data into buffer*/
	data[1] = value;
 800021a:	79bb      	ldrb	r3, [r7, #6]
 800021c:	737b      	strb	r3, [r7, #13]

	//CS low
    csLow();
 800021e:	f000 f9c1 	bl	80005a4 <csLow>

    /*Transmit data and address*/
    SPI1_Transmit(data, 2);
 8000222:	f107 030c 	add.w	r3, r7, #12
 8000226:	2102      	movs	r1, #2
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f95d 	bl	80004e8 <SPI1_Transmit>

    //CS high
    csHigh();
 800022e:	f000 f9c9 	bl	80005c4 <csHigh>
}
 8000232:	bf00      	nop
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <lis3dshInit>:

void lis3dshInit(void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	af00      	add	r7, sp, #0
	/*Enable SPI GPIO*/
	SPI_gpioInit();
 800023e:	f000 f855 	bl	80002ec <SPI_gpioInit>

	/*Enable SPI*/
	SPI1_Config();
 8000242:	f000 f8f7 	bl	8000434 <SPI1_Config>

	/*Set data format range to +-2g, 100Hz*/
	lis3dshWrite(LIS3DSH_CTRL_REG4, LIS3DSH_ODR_100HZ);
 8000246:	2167      	movs	r1, #103	@ 0x67
 8000248:	2020      	movs	r0, #32
 800024a:	f7ff ffdc 	bl	8000206 <lis3dshWrite>
}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
	...

08000254 <main>:
uint8_t rxData[6];
uint8_t who_am_i;
int8_t temp;

int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	lis3dshInit();
 8000258:	f7ff ffef 	bl	800023a <lis3dshInit>
    lis3dshRead(LIS3DSH_WHO_AM_I, &who_am_i, 1);
 800025c:	2201      	movs	r2, #1
 800025e:	491d      	ldr	r1, [pc, #116]	@ (80002d4 <main+0x80>)
 8000260:	200f      	movs	r0, #15
 8000262:	f7ff ffb1 	bl	80001c8 <lis3dshRead>


	// Verify communication
	while (who_am_i != 0x3F)
 8000266:	bf00      	nop
 8000268:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <main+0x80>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2b3f      	cmp	r3, #63	@ 0x3f
 800026e:	d002      	beq.n	8000276 <main+0x22>
	{
		return -1;  // Initialization failed
 8000270:	f04f 33ff 	mov.w	r3, #4294967295
 8000274:	e02c      	b.n	80002d0 <main+0x7c>
	}

    while(1)
    {
    	lis3dshRead(LIS3DSH_OUT_T, &temp, 1);
 8000276:	2201      	movs	r2, #1
 8000278:	4917      	ldr	r1, [pc, #92]	@ (80002d8 <main+0x84>)
 800027a:	200c      	movs	r0, #12
 800027c:	f7ff ffa4 	bl	80001c8 <lis3dshRead>

    	lis3dshRead(LIS3DSH_OUT_X_L, rxData, 6);
 8000280:	2206      	movs	r2, #6
 8000282:	4916      	ldr	r1, [pc, #88]	@ (80002dc <main+0x88>)
 8000284:	2028      	movs	r0, #40	@ 0x28
 8000286:	f7ff ff9f 	bl	80001c8 <lis3dshRead>

    	x = (rxData[1] << 8) | rxData[0];
 800028a:	4b14      	ldr	r3, [pc, #80]	@ (80002dc <main+0x88>)
 800028c:	785b      	ldrb	r3, [r3, #1]
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	b21a      	sxth	r2, r3
 8000292:	4b12      	ldr	r3, [pc, #72]	@ (80002dc <main+0x88>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b21b      	sxth	r3, r3
 8000298:	4313      	orrs	r3, r2
 800029a:	b21a      	sxth	r2, r3
 800029c:	4b10      	ldr	r3, [pc, #64]	@ (80002e0 <main+0x8c>)
 800029e:	801a      	strh	r2, [r3, #0]
    	y = (rxData[3] << 8) | rxData[2];
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <main+0x88>)
 80002a2:	78db      	ldrb	r3, [r3, #3]
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	b21a      	sxth	r2, r3
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <main+0x88>)
 80002aa:	789b      	ldrb	r3, [r3, #2]
 80002ac:	b21b      	sxth	r3, r3
 80002ae:	4313      	orrs	r3, r2
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <main+0x90>)
 80002b4:	801a      	strh	r2, [r3, #0]
    	z = (rxData[5] << 8) | rxData[4];
 80002b6:	4b09      	ldr	r3, [pc, #36]	@ (80002dc <main+0x88>)
 80002b8:	795b      	ldrb	r3, [r3, #5]
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	b21a      	sxth	r2, r3
 80002be:	4b07      	ldr	r3, [pc, #28]	@ (80002dc <main+0x88>)
 80002c0:	791b      	ldrb	r3, [r3, #4]
 80002c2:	b21b      	sxth	r3, r3
 80002c4:	4313      	orrs	r3, r2
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x94>)
 80002ca:	801a      	strh	r2, [r3, #0]
    	lis3dshRead(LIS3DSH_OUT_T, &temp, 1);
 80002cc:	bf00      	nop
 80002ce:	e7d2      	b.n	8000276 <main+0x22>
    }
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000002a 	.word	0x2000002a
 80002d8:	2000002b 	.word	0x2000002b
 80002dc:	20000024 	.word	0x20000024
 80002e0:	2000001c 	.word	0x2000001c
 80002e4:	2000001e 	.word	0x2000001e
 80002e8:	20000020 	.word	0x20000020

080002ec <SPI_gpioInit>:
#define SR_TXE		(1U<<1)
#define SR_RXNE		(1U<<0)
#define SR_BSY		(1U<<7)

void SPI_gpioInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002f0:	4b4d      	ldr	r3, [pc, #308]	@ (8000428 <SPI_gpioInit+0x13c>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a4c      	ldr	r2, [pc, #304]	@ (8000428 <SPI_gpioInit+0x13c>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Enable clock access to GPIOE*/
	RCC->AHB1ENR |= GPIOEEN;
 80002fc:	4b4a      	ldr	r3, [pc, #296]	@ (8000428 <SPI_gpioInit+0x13c>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000300:	4a49      	ldr	r2, [pc, #292]	@ (8000428 <SPI_gpioInit+0x13c>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5, PA6, and PA7 to alternate function*/
	/*PA5*/
	GPIOA->MODER &= ~(1U<<10);
 8000308:	4b48      	ldr	r3, [pc, #288]	@ (800042c <SPI_gpioInit+0x140>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a47      	ldr	r2, [pc, #284]	@ (800042c <SPI_gpioInit+0x140>)
 800030e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000312:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 8000314:	4b45      	ldr	r3, [pc, #276]	@ (800042c <SPI_gpioInit+0x140>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a44      	ldr	r2, [pc, #272]	@ (800042c <SPI_gpioInit+0x140>)
 800031a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800031e:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &= ~(1U<<12);
 8000320:	4b42      	ldr	r3, [pc, #264]	@ (800042c <SPI_gpioInit+0x140>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a41      	ldr	r2, [pc, #260]	@ (800042c <SPI_gpioInit+0x140>)
 8000326:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13);
 800032c:	4b3f      	ldr	r3, [pc, #252]	@ (800042c <SPI_gpioInit+0x140>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a3e      	ldr	r2, [pc, #248]	@ (800042c <SPI_gpioInit+0x140>)
 8000332:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000336:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &= ~(1U<<14);
 8000338:	4b3c      	ldr	r3, [pc, #240]	@ (800042c <SPI_gpioInit+0x140>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a3b      	ldr	r2, [pc, #236]	@ (800042c <SPI_gpioInit+0x140>)
 800033e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000342:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<15);
 8000344:	4b39      	ldr	r3, [pc, #228]	@ (800042c <SPI_gpioInit+0x140>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a38      	ldr	r2, [pc, #224]	@ (800042c <SPI_gpioInit+0x140>)
 800034a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800034e:	6013      	str	r3, [r2, #0]

	/*Set PE3 as output*/
	GPIOE->MODER |= (1U<<6);
 8000350:	4b37      	ldr	r3, [pc, #220]	@ (8000430 <SPI_gpioInit+0x144>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a36      	ldr	r2, [pc, #216]	@ (8000430 <SPI_gpioInit+0x144>)
 8000356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800035a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER &= ~(1U<<7);
 800035c:	4b34      	ldr	r3, [pc, #208]	@ (8000430 <SPI_gpioInit+0x144>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a33      	ldr	r2, [pc, #204]	@ (8000430 <SPI_gpioInit+0x144>)
 8000362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000366:	6013      	str	r3, [r2, #0]

	/*Set alternate function - AF5*/
	GPIOA->AFR[0] |= (0x05 << 20);
 8000368:	4b30      	ldr	r3, [pc, #192]	@ (800042c <SPI_gpioInit+0x140>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a2f      	ldr	r2, [pc, #188]	@ (800042c <SPI_gpioInit+0x140>)
 800036e:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8000372:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << 24);
 8000374:	4b2d      	ldr	r3, [pc, #180]	@ (800042c <SPI_gpioInit+0x140>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a2c      	ldr	r2, [pc, #176]	@ (800042c <SPI_gpioInit+0x140>)
 800037a:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 800037e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x05 << 28);
 8000380:	4b2a      	ldr	r3, [pc, #168]	@ (800042c <SPI_gpioInit+0x140>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a29      	ldr	r2, [pc, #164]	@ (800042c <SPI_gpioInit+0x140>)
 8000386:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 800038a:	6213      	str	r3, [r2, #32]

	/*Set PA5, PA6, and PA7 output speed to medium*/
	GPIOA->OSPEEDR |= (1U<<10);
 800038c:	4b27      	ldr	r3, [pc, #156]	@ (800042c <SPI_gpioInit+0x140>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a26      	ldr	r2, [pc, #152]	@ (800042c <SPI_gpioInit+0x140>)
 8000392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000396:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &= ~(1U<<11);
 8000398:	4b24      	ldr	r3, [pc, #144]	@ (800042c <SPI_gpioInit+0x140>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a23      	ldr	r2, [pc, #140]	@ (800042c <SPI_gpioInit+0x140>)
 800039e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003a2:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (1U<<12);
 80003a4:	4b21      	ldr	r3, [pc, #132]	@ (800042c <SPI_gpioInit+0x140>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a20      	ldr	r2, [pc, #128]	@ (800042c <SPI_gpioInit+0x140>)
 80003aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003ae:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &= ~(1U<<13);
 80003b0:	4b1e      	ldr	r3, [pc, #120]	@ (800042c <SPI_gpioInit+0x140>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	@ (800042c <SPI_gpioInit+0x140>)
 80003b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80003ba:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (1U<<14);
 80003bc:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <SPI_gpioInit+0x140>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	4a1a      	ldr	r2, [pc, #104]	@ (800042c <SPI_gpioInit+0x140>)
 80003c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003c6:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR &= ~(1U<<15);
 80003c8:	4b18      	ldr	r3, [pc, #96]	@ (800042c <SPI_gpioInit+0x140>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	4a17      	ldr	r2, [pc, #92]	@ (800042c <SPI_gpioInit+0x140>)
 80003ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003d2:	6093      	str	r3, [r2, #8]

	/*Set PA5, PA6, and PA7 to pull-dwon mode*/
	GPIOA->PUPDR &= ~(1U<<10);
 80003d4:	4b15      	ldr	r3, [pc, #84]	@ (800042c <SPI_gpioInit+0x140>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	4a14      	ldr	r2, [pc, #80]	@ (800042c <SPI_gpioInit+0x140>)
 80003da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003de:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<11);
 80003e0:	4b12      	ldr	r3, [pc, #72]	@ (800042c <SPI_gpioInit+0x140>)
 80003e2:	68db      	ldr	r3, [r3, #12]
 80003e4:	4a11      	ldr	r2, [pc, #68]	@ (800042c <SPI_gpioInit+0x140>)
 80003e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003ea:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<12);
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <SPI_gpioInit+0x140>)
 80003ee:	68db      	ldr	r3, [r3, #12]
 80003f0:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <SPI_gpioInit+0x140>)
 80003f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f6:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<13);
 80003f8:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <SPI_gpioInit+0x140>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	4a0b      	ldr	r2, [pc, #44]	@ (800042c <SPI_gpioInit+0x140>)
 80003fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000402:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<14);
 8000404:	4b09      	ldr	r3, [pc, #36]	@ (800042c <SPI_gpioInit+0x140>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a08      	ldr	r2, [pc, #32]	@ (800042c <SPI_gpioInit+0x140>)
 800040a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800040e:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<15);
 8000410:	4b06      	ldr	r3, [pc, #24]	@ (800042c <SPI_gpioInit+0x140>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	4a05      	ldr	r2, [pc, #20]	@ (800042c <SPI_gpioInit+0x140>)
 8000416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800041a:	60d3      	str	r3, [r2, #12]
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40023800 	.word	0x40023800
 800042c:	40020000 	.word	0x40020000
 8000430:	40021000 	.word	0x40021000

08000434 <SPI1_Config>:

void SPI1_Config(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	/*Enable clock access to SPI1*/
	RCC->APB2ENR |= SPI1EN;
 8000438:	4b29      	ldr	r3, [pc, #164]	@ (80004e0 <SPI1_Config+0xac>)
 800043a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043c:	4a28      	ldr	r2, [pc, #160]	@ (80004e0 <SPI1_Config+0xac>)
 800043e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000442:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set Baud Rate - fPCLK/64*/
	SPI1->CR1 |= (1U<<3);
 8000444:	4b27      	ldr	r3, [pc, #156]	@ (80004e4 <SPI1_Config+0xb0>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a26      	ldr	r2, [pc, #152]	@ (80004e4 <SPI1_Config+0xb0>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1U<<4);
 8000450:	4b24      	ldr	r3, [pc, #144]	@ (80004e4 <SPI1_Config+0xb0>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a23      	ldr	r2, [pc, #140]	@ (80004e4 <SPI1_Config+0xb0>)
 8000456:	f023 0310 	bic.w	r3, r3, #16
 800045a:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<5);
 800045c:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <SPI1_Config+0xb0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a20      	ldr	r2, [pc, #128]	@ (80004e4 <SPI1_Config+0xb0>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6013      	str	r3, [r2, #0]

	/*Set CPOL and CPHA to 0*/
	SPI1->CR1 &= ~(1U<<0);
 8000468:	4b1e      	ldr	r3, [pc, #120]	@ (80004e4 <SPI1_Config+0xb0>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a1d      	ldr	r2, [pc, #116]	@ (80004e4 <SPI1_Config+0xb0>)
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(1U<<1);
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <SPI1_Config+0xb0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <SPI1_Config+0xb0>)
 800047a:	f023 0302 	bic.w	r3, r3, #2
 800047e:	6013      	str	r3, [r2, #0]

	/*Set SPI1 to Full Duplex mode*/
	SPI1->CR1 &= ~(1U<<10);
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <SPI1_Config+0xb0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a17      	ldr	r2, [pc, #92]	@ (80004e4 <SPI1_Config+0xb0>)
 8000486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800048a:	6013      	str	r3, [r2, #0]

	/*Set MSB first*/
	SPI1->CR1 &= ~(1U<<7);
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <SPI1_Config+0xb0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <SPI1_Config+0xb0>)
 8000492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000496:	6013      	str	r3, [r2, #0]

	/*Set SPI1 to master mode*/
	SPI1->CR1 |= (1U<<2);
 8000498:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <SPI1_Config+0xb0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a11      	ldr	r2, [pc, #68]	@ (80004e4 <SPI1_Config+0xb0>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6013      	str	r3, [r2, #0]

	/*Set data frame format to 8-bit mode*/
	SPI1->CR1 &= ~(1U<<11);
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <SPI1_Config+0xb0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <SPI1_Config+0xb0>)
 80004aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004ae:	6013      	str	r3, [r2, #0]

	/*Set SSI and SSM to 1*/
	SPI1->CR1 |= (1U<<8);
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <SPI1_Config+0xb0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <SPI1_Config+0xb0>)
 80004b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ba:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= (1U<<9);
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <SPI1_Config+0xb0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <SPI1_Config+0xb0>)
 80004c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004c6:	6013      	str	r3, [r2, #0]

	/*Enable SPI1 module*/
	SPI1->CR1 |= (1U<<6);
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <SPI1_Config+0xb0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <SPI1_Config+0xb0>)
 80004ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40013000 	.word	0x40013000

080004e8 <SPI1_Transmit>:

void SPI1_Transmit(uint8_t *data, uint32_t size)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
	uint8_t temp;
	while(i<size)
 80004f6:	e00f      	b.n	8000518 <SPI1_Transmit+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & SR_TXE)){}
 80004f8:	bf00      	nop
 80004fa:	4b16      	ldr	r3, [pc, #88]	@ (8000554 <SPI1_Transmit+0x6c>)
 80004fc:	689b      	ldr	r3, [r3, #8]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0f9      	beq.n	80004fa <SPI1_Transmit+0x12>

		/*Write data to the data register*/
		SPI1->DR = data[i];
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4413      	add	r3, r2
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <SPI1_Transmit+0x6c>)
 8000510:	60da      	str	r2, [r3, #12]

		i++;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
	while(i<size)
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d3eb      	bcc.n	80004f8 <SPI1_Transmit+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & SR_TXE)){}
 8000520:	bf00      	nop
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <SPI1_Transmit+0x6c>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	f003 0302 	and.w	r3, r3, #2
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f9      	beq.n	8000522 <SPI1_Transmit+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & SR_BSY)){}
 800052e:	bf00      	nop
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <SPI1_Transmit+0x6c>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000538:	2b00      	cmp	r3, #0
 800053a:	d1f9      	bne.n	8000530 <SPI1_Transmit+0x48>

	/*Clear the OVR by reading the DR and SR register*/
	temp = SPI1->DR;
 800053c:	4b05      	ldr	r3, [pc, #20]	@ (8000554 <SPI1_Transmit+0x6c>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 8000542:	4b04      	ldr	r3, [pc, #16]	@ (8000554 <SPI1_Transmit+0x6c>)
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	72fb      	strb	r3, [r7, #11]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40013000 	.word	0x40013000

08000558 <SPI1_Receive>:

void SPI1_Receive(uint8_t *data, uint32_t size)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	while(size)
 8000562:	e013      	b.n	800058c <SPI1_Receive+0x34>
	{
		/*Send dummy data*/
		SPI1->DR = 0;
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <SPI1_Receive+0x48>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE to be set*/
		while(!(SPI1->SR & SR_RXNE)){}
 800056a:	bf00      	nop
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <SPI1_Receive+0x48>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <SPI1_Receive+0x14>

		/*Read the data from DR*/
		*data++ = (SPI1->DR);
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <SPI1_Receive+0x48>)
 800057a:	68d9      	ldr	r1, [r3, #12]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	1c5a      	adds	r2, r3, #1
 8000580:	607a      	str	r2, [r7, #4]
 8000582:	b2ca      	uxtb	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		size--;
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	3b01      	subs	r3, #1
 800058a:	603b      	str	r3, [r7, #0]
	while(size)
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d1e8      	bne.n	8000564 <SPI1_Receive+0xc>
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40013000 	.word	0x40013000

080005a4 <csLow>:

void csLow(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	/*Set the PE3/CS low to enable*/
	GPIOE->ODR &= ~(1U<<3);
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <csLow+0x1c>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4a04      	ldr	r2, [pc, #16]	@ (80005c0 <csLow+0x1c>)
 80005ae:	f023 0308 	bic.w	r3, r3, #8
 80005b2:	6153      	str	r3, [r2, #20]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <csHigh>:

void csHigh(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
	/*Set the PE3/CS high to disable*/
	GPIOE->ODR |= (1U<<3);
 80005c8:	4b05      	ldr	r3, [pc, #20]	@ (80005e0 <csHigh+0x1c>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <csHigh+0x1c>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6153      	str	r3, [r2, #20]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e4:	480d      	ldr	r0, [pc, #52]	@ (800061c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480c      	ldr	r0, [pc, #48]	@ (8000620 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ee:	490d      	ldr	r1, [pc, #52]	@ (8000624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000628 <LoopForever+0xe>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000604:	4c0a      	ldr	r4, [pc, #40]	@ (8000630 <LoopForever+0x16>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000612:	f000 f811 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fe1d 	bl	8000254 <main>

0800061a <LoopForever>:

LoopForever:
  b LoopForever
 800061a:	e7fe      	b.n	800061a <LoopForever>
  ldr   r0, =_estack
 800061c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000628:	080006a0 	.word	0x080006a0
  ldr r2, =_sbss
 800062c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000630:	2000002c 	.word	0x2000002c

08000634 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC_IRQHandler>
	...

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	@ (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	@ (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	@ (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	@ (800067c <__libc_init_array+0x44>)
 800064c:	f000 f818 	bl	8000680 <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08000698 	.word	0x08000698
 8000674:	08000698 	.word	0x08000698
 8000678:	08000698 	.word	0x08000698
 800067c:	0800069c 	.word	0x0800069c

08000680 <_init>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr

0800068c <_fini>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr
